#!/usr/bin/env python3

#Script Name: encryption
#Purpose: Encrypt of data
#Example usage: protect the integrity of data
#Expected output: encrypted data
#variables:

import random
from scapy.all import ICMP, IP, sr1, TCP

target = "198.168.18.73"
# target host
port_range = (22, 23, 80, 443, 3389)
# ports to be scan

#sends SYN to defined ports from random ports
for dst_port in port_range:
    src_port = random.randint(1,65534)
    # random source port
    response = sr1(IP(dst=target)/TCP(sport=src_port,dport=dst_port,flags="S"),timeout=3,verbose=0)
    # Parameters needed to send packets and receive respond
    if response is None:
    # if there is no response
        print (f"{target}:{dst_port} is filtered (dropped)") 
    
    elif (response.haslayer(TCP)): 
        if (response.getlayer(TCP).flags == 0x12):
        # if the port is open and accepting requests
            send_rst = sr(IP(dst=target)/TCP(sport=src_port,dport=dst_port,flags="R"),timeout=3,verbose=0,)
            # sends RST to close conection 
            print (f"{target}:{dst_port} is open")
        
        elif (response.getlayer(TCP).flags == 0x14):
        # if the port is closed
            print (f"{target}:{dst_port} is closed")
    
    elif(response.haslayer(ICMP)):
        if(int(response.getlayer(ICMP).type) == 3 and
        int(response.getlayer(ICMP).code) in [1,2,3,9,10,13]):
        # The port is filtering, not accepting TCP requests
            print (f"{target}:{dst_port} is filtered (dropped)")