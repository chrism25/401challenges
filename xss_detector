#!/usr/bin/env python3

#Script Name: xss_detector
#Purpose: Test URLs for XSS vulnerabilities
#Example usage: Evaluate URL vulnerability for XSS
#Expected output: Evaluation of URL with forms being detected

### TODO: Install bs4 

import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin

#Returns all forms from the HTML content
def get_all_forms(url):
    #Request of the URL content is parse with "html parser" using
    #beautiful soup and place it on a variable
    soup = bs(requests.get(url).content, "html.parser")
    #Returns the information matching "form"
    return soup.find_all("form")

#Extract atributes and details from forms
def get_form_details(form):
    #Opens set of key/values for mapping
    details = {}
    #Gets the atributes in the form "action" (URL)
    action = form.attrs.get("action").lower()
    #From the form "method" (POST, GET, etc)
    method = form.attrs.get("method", "get").lower()
    #Opens a list
    inputs = []
    #Gets all the input information and goes through it to classify it
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        #Appends the information parsed into "type" and "name"
        inputs.append({"type": input_type, "name": input_name})
    #Sends these types into the list, for a dictionary reference
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

#Submits a form given by "form_details", takes the form's URL,
#value will take the form of search inputs 
def submit_form(form_details, url, value):
    #Puts together a full absolute URL based on the "action" list
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]
    data = {}
    
    for input in inputs:
        #Given input in the form of "text" or "search" is taken as "value"
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        #When "input_name" and "input_value" have a value different to
        #zero, they are added to "data" list for submission
        if input_name and input_value:
            data[input_name] = input_value
    
    #Submits a post or get request depending on the form method
    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

#Prints all XSS vulnerabilities for the given url and asses if it is
#vulnerable or not 
def scan_xss(url):
    #Gets all forms for the url
    forms = get_all_forms(url)
    #Outputs the number of forms for the given url
    print(f"[+] Detected {len(forms)} forms on {url}.")
    #HTTP and JS code that will test URL for XSS vulnerabilities
    js_script = "<script> alert('Ready for XSS') </script>"
    is_vulnerable = False
    for form in forms:
        #Places all form details and atributes in a varible
        form_details = get_form_details(form)
        #Submits the form with all the parameters collected
        content = submit_form(form_details, url, js_script).content.decode()
        #Checks url and JS code to determine XSS
        if js_script in content:
            print(f"[+] XSS Detected on {url}")
            print(f"[*] Form details:")
            pprint(form_details)
            is_vulnerable = True
    return is_vulnerable

#Main
#Begins the script by asking the user for an URL to be analyze
if __name__ == "__main__":
    url = input("Enter a URL to test for XSS:") 
    print(scan_xss(url))

##############
##### EXAMPLE RESULTS #####

# CASE 1
# Enter a URL to test for XSS:https://xss-game.appspot.com/level1/frame
# [+] Detected 1 forms on https://xss-game.appspot.com/level1/frame.
# [+] XSS Detected on https://xss-game.appspot.com/level1/frame
# [*] Form details:
# {'action': '',
#  'inputs': [{'name': 'query',
#              'type': 'text',
#              'value': "<script> alert('You have been hacked') </script>"},
#             {'name': None, 'type': 'submit'}],
#  'method': 'get'}
# True

# CASE 2
# Enter a URL to test for XSS:http://dvwa.local/login.php
# [+] Detected 1 forms on http://dvwa.local/login.php.
# False
