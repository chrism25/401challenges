#!/usr/bin/env python3

#Script Name: encryption
#Purpose: Encrypt of data
#Example usage: protect the integrity of data
#Expected output: encrypted data
#variables: ans, key, string, enc, dec, file, file_data, file_data

from cryptography.fernet import Fernet
import os.path

def menu():
    print()
    print("****** MENU ******\n")
    print("1) Encrypt File")
    print("2) Decrypt File")
    print("3) Encrypt phrase")
    print("4) Decrypt phrase")
    print("5) Quit\n")
    ans = (input("What would you like to do?: "))
    #Ask user for input restricted to integers
    return ans

#Triggers a response depending on the input
def selection(ans):
    if ans == "1" or ans == "2":
    #encrypts or decrypts file
        path = input("\nPlease provide full path name: ")
        #ask user for the file path
        if check(path) == True:    
        #check files existence on path provided
            if ans == "1":
            #encrypts file
                gen()
                key = load()
                en_file(path, key)
                #encrypts file
            else:
            #decrypts file
                key = load()
                dec_file(path, key)
        else: 
            print("\nCouldn't find the file, please check the path")             
    
    elif ans == "3":
    #encrypts message    
        gen()
        enc_key = load()
        #set load into a variable        
        enc = en_string(enc_key)
        #encrypts message      
        
    elif ans == "4":
    #decrypts message
        enc_key = load()
        #set load into a variable        
        dec = dec_string(enc_key)
        #decrypts message
            
    elif ans == "5":
        exit()
        
    else:
        print ("\nChoose among the options please")          
     
#checks file existance on path provided     
def check(path):
    return os.path.exists(path)
    #checks for file existance

#Generates key and stores it
def gen():
    file_key = load()
    if len(file_key) == 0:
    #checks to see if file with key exists    
        key = Fernet.generate_key()
        #Generates key
        with open("master", "wb") as key_file:
        #Opens file "master" (wb=writing binary)    
            key_file.write(key)
            #Writes key on file
    else:
        pass        

#loads key everytime we need to de/encrypt    
def load():
    return open("master", "rb").read()
    #Loads key from file "master" (rb=read binary)

#encrypts file
def en_file(path, key):
    f = Fernet(key)
    #begins fernet
    with open(path, "rb") as file:
        file_data = file.read()
        #Opens file to read
    enc = f.encrypt(file_data)
    #encrypts the data an places it in a variable
    with open(path, "wb") as file:
        file.write(enc)
        #overwrites orginal with encrypted data
    print ("\nHere is your secret: ", enc.decode())
     
#Decrypts file        
def dec_file(path, key):
    f = Fernet(key)
    with open(path, "rb") as file:
        enc = file.read()
    dec = f.decrypt(enc)
    #decrypts data and places is it into a variable
    with open(path, "wb") as file:
        file.write(dec)
    print("\nUse with caution: ", dec.decode())

#encrypts string        
def en_string(key):
    string = input("\nWhat would you like to encrypt? ").encode()
    #ask for input and removes byte format
    f = Fernet(key)
    enc = f.encrypt(string).decode()
    #encrypts message and remobes "b"
    print ("Here you go:", enc)
    
#decrypts code    
def dec_string(key):
    string = input("What would you like to decrypt? ").encode()
    f = Fernet(key)
    dec = f.decrypt(string).decode()
    #decrypts message
    print ("Here you go: ", dec)
    
#main function
def main_func():
    for i in range(6):
    #Let the user use the menu up to 6 times at a time
        ans = menu()
        selection(ans)
main_func()