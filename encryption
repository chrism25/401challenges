#!/usr/bin/env python3

#Script Name: encryption
#Purpose: Encrypt of data
#Example usage: protect the integrity of data
#Expected output: encrypted data
#variables: ans, key, string, enc, dec, file, file_data, file_data

from cryptography.fernet import Fernet
import os.path

def menu():
    print()
    print("****** MENU ******\n")
    print("1) Encrypt File")
    print("2) Decrypt File")
    print("3) Encrypt phrase")
    print("4) Decrypt phrase")
    print("5) Quit\n")
menu()
ans = int(input("What would you like to do?: "))
#Ask user for input restricted to integers
key = Fernet.generate_key()
#generates key

def gen():
    with open("master", "wb") as key_file:
        key_file.write(key)
        #saves key under file "master" (wb=writing binary)
    
def load():
#loads key everytime we need to de/encrypt 
    return open("master", "rb").read()
    #Loads key from file 'master' (rb=read binary)

def en_file(path):
#encrypts file
    load()
    f = Fernet(key)
    #begins fernet
    with open(path, "rb") as file:
        file_data = file.read()
        #reads all data an places is in a variable
    enc = f.encrypt(file_data)
    #encrypts the data an places it in a variable
    with open(path, "wb") as file:
        file.write(enc)
        #overwrites orginal with encrypted data
    print ("\nHere is your secret: ", enc.decode())
        
def dec_file(key, path):
#decrypts file
    load()
    f = Fernet(key)
    with open(path, "rb") as file:
        enc = file.read()
    dec = f.decrypt(enc)
    #decrypts data and places is it into a variable
    with open(path, "wb") as file:
        file.write(dec)
    print("\nUse with caution: ", dec.decode())
        
def en_string():
#encrypts string
    gen()
    load()
    string = input("What would you like to encrypt? ").encode()
    #ask for input and removes byte format
    f = Fernet(key)
    enc = f.encrypt(string).decode()
    #encrypts message
    print ("Here you go:", enc)
    
def de_string():
#decrypts code
    gen()
    load()
    string = input("What would you like to decrypt? ").encode()
    f = Fernet(key)
    dec = f.decrypt(string).decode()
    #decrypts message
    print ("Here you go: ", dec)
    
while ans !=5:    
#5 closes loop
    if ans == "1" or "2":
    #if the input is 1 or 2
        path = input("\nPlease provide file path: ")
        #ask user for the file path
        if os.path.exists(path) == True:    
            #checks the path for the variable and if is true:
            if ans == 1:
                en_file(path)
            else:
                dec_file(key, path)
        else: 
            print("\nFile doesn't exist there, please check path")             
    elif ans == "3":    
        en_string()
    elif ans == "4":
        de_string()
    else:
        print ("\nChoose among the options please")        

    print ()
    menu()
    #brings menu again
    ans = int(input("something else?: "))
    #So user can continue using the script after a task
